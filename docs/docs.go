// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activities": {
            "get": {
                "description": "Returns list of all registered activities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "List all activities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Activity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/activities/create": {
            "post": {
                "description": "Create a new activity with the given name, description, category, price, and package ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Create a new activity",
                "parameters": [
                    {
                        "description": "Activity data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ActivityPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Activity %s successfully created",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "activity with name %s inside package already exists",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/activities/delete/{activityID}": {
            "delete": {
                "description": "Delete activity data by ID from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Delete activity by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Activity ID",
                        "name": "activityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activity with ID %d successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "missing or invalid activity ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/activities/filter": {
            "get": {
                "description": "Filter activities by category, rating, price, and hidden status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Filter activities",
                "parameters": [
                    {
                        "description": "Filter payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ActivityFilterPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Activity"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/activities/update/{activityID}": {
            "put": {
                "description": "Update activity data by ID and specifying the new values",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Update activity by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Activity ID",
                        "name": "activityID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ActivityPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Activity"
                        }
                    },
                    "400": {
                        "description": "missing or invalid activity ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Activity not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/activities/{activityID}": {
            "get": {
                "description": "Get activity data by ID from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Get activity by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Activity ID",
                        "name": "activityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Activity"
                        }
                    },
                    "400": {
                        "description": "missing or invalid activity ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/package/reviews/{packageID}": {
            "get": {
                "description": "Get a reviews from certain package in database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "review"
                ],
                "summary": "Get a reviews by packageID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "packageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Review"
                            }
                        }
                    },
                    "400": {
                        "description": "missing or invalid package ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/packages/create": {
            "post": {
                "description": "Create a new package with the given name, description, price, and organizer ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "package"
                ],
                "summary": "Create a new package",
                "parameters": [
                    {
                        "description": "Package data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreatePackagePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Package %s successfully created",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Package with name %s already exists",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/packages/delete/{packageID}": {
            "delete": {
                "description": "Delete package data with all activties by ID from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "package"
                ],
                "summary": "Delete package by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "packageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package with ID %d successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "description": "List all reviews information from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "review"
                ],
                "summary": "List all reviews",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Review"
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reviews/create": {
            "post": {
                "description": "Create a new review in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "review"
                ],
                "summary": "Create a new review",
                "parameters": [
                    {
                        "description": "Review data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ReviewPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review from user %d successfully created",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "review from same user: %s already exists",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reviews/delete/{reviewID}": {
            "delete": {
                "description": "Delete a review by ID from the database",
                "tags": [
                    "review"
                ],
                "summary": "Delete a review by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review with ID %d successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "missing or invalid review ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reviews/update/{reviewID}": {
            "put": {
                "description": "Update a review by ID in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "review"
                ],
                "summary": "Update a review by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ReviewPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Review"
                        }
                    },
                    "400": {
                        "description": "missing or invalid review ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reviews/{reviewID}": {
            "get": {
                "description": "Get a review by ID from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "review"
                ],
                "summary": "Get a review by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Review"
                        }
                    },
                    "400": {
                        "description": "missing or invalid review ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "List all registered users displaying the user information (username, email, password).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/create-organizer": {
            "post": {
                "description": "creates organizer role inside database with specified description",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "create organizer role inside database",
                "parameters": [
                    {
                        "description": "Organizer data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateOrganizerPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organizer with ID %d successfully created",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/delete/{userID}": {
            "delete": {
                "description": "deletes user with specified id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user from database",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user with id %d successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Login to user account specifying (username, password).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login to user account",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generated jwt\"  \"eyJhbGcifdghOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Create a new user by specifying the user information (username, email, password).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user account",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    },
                    "400": {
                        "description": "invalud payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/update/{userID}": {
            "put": {
                "description": "updates user with matching id with payload user data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userID}": {
            "get": {
                "description": "Returns user with mathcing id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.Activity": {
            "type": "object",
            "properties": {
                "averageRating": {
                    "type": "number"
                },
                "basePrice": {
                    "type": "number"
                },
                "category": {
                    "type": "string"
                },
                "creationDate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fk_Packageid": {
                    "type": "integer"
                },
                "hidden": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "types.ActivityFilterPayload": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "Education"
                },
                "maxPrice": {
                    "type": "number",
                    "example": 15.5
                },
                "maxRating": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1,
                    "example": 5
                },
                "minPrice": {
                    "type": "number",
                    "example": 15.5
                },
                "minRating": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1,
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Amber history"
                },
                "organizer": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "types.ActivityPayload": {
            "type": "object",
            "required": [
                "basePrice",
                "category",
                "description",
                "fk_Packageid",
                "hidden",
                "name"
            ],
            "properties": {
                "basePrice": {
                    "type": "number",
                    "example": 15.5
                },
                "category": {
                    "type": "string",
                    "example": "Education"
                },
                "description": {
                    "type": "string",
                    "example": "Educations about amber"
                },
                "fk_Packageid": {
                    "type": "integer",
                    "example": 1
                },
                "hidden": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Amber history"
                }
            }
        },
        "types.CreateOrganizerPayload": {
            "type": "object",
            "required": [
                "description",
                "id"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "organizer"
                },
                "id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "types.CreatePackagePayload": {
            "type": "object",
            "required": [
                "description",
                "fk_Organizerid",
                "name",
                "price"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Everything about amber"
                },
                "fk_Organizerid": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Amber"
                },
                "price": {
                    "type": "number",
                    "example": 40
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Invalid payload or user already exists"
                }
            }
        },
        "types.LoginUserPayload": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "types.Review": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "fk_Activityid": {
                    "type": "integer"
                },
                "fk_Userid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "types.ReviewPayload": {
            "type": "object",
            "required": [
                "comment",
                "fk_Activityid",
                "fk_Userid",
                "rating"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "example": "Very nice education"
                },
                "fk_Activityid": {
                    "type": "integer",
                    "example": 1
                },
                "fk_Userid": {
                    "type": "integer",
                    "example": 1
                },
                "rating": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1,
                    "example": 5
                }
            }
        },
        "types.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastLoginDate": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "registrationDate": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.UserPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 5,
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "types.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastLoginDate": {
                    "type": "string",
                    "example": "2023-10-01T18:04:05Z07:00"
                },
                "registrationDate": {
                    "type": "string",
                    "example": "2023-10-01T15:04:05Z07:00"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
